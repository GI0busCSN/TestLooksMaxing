System.register(["./index-legacy-D0ny1h9P.js"],function(e,n){"use strict";var t,a,r,o,i,s,l,c,d,p,g,f,h;return{setters:[e=>{t=e._,a=e.i,r=e.c,o=e.j,i=e.r,s=e.a,l=e.o,c=e.b,d=e.d,p=e.w,g=e.e,f=e.t,h=e.F}],execute:function(){var n=document.createElement("style");n.textContent=".wrapper[data-v-f8b79805]{display:flex;flex-direction:column;align-items:center;justify-content:center;gap:20px;width:100%;height:100%}.wrapper .cards[data-v-f8b79805]{display:flex;justify-content:center}.scan-container[data-v-f8b79805]{position:relative;display:inline-block;border-radius:25px;overflow:hidden}.scan-overlay[data-v-f8b79805]{position:absolute;top:0;right:0;bottom:0;left:0;pointer-events:none;mix-blend-mode:screen}.scan-grid[data-v-f8b79805]{position:absolute;top:0;right:0;bottom:0;left:0;background-image:linear-gradient(rgba(147,71,255,.06) 1px,transparent 1px),linear-gradient(90deg,rgba(147,71,255,.06) 1px,transparent 1px);background-size:36px 36px,36px 36px;opacity:.9}.scan-line[data-v-f8b79805]{position:absolute;left:-10%;width:120%;height:10%;transform:translateY(-140%);background:linear-gradient(90deg,rgba(147,71,255,0),rgba(147,71,255,.12),rgba(255,255,255,.9),rgba(147,71,255,.18),rgba(147,71,255,0));filter:drop-shadow(0 0 18px rgba(147,71,255,.9));animation:scan-move-f8b79805 2.8s linear infinite}.scan-glow[data-v-f8b79805]{position:absolute;left:0;right:0;height:100%;top:0;background:radial-gradient(ellipse at center,rgba(147,71,255,.06) 0%,rgba(147,71,255,.02) 30%,transparent 60%);mix-blend-mode:screen;pointer-events:none}@keyframes scan-move-f8b79805{0%{transform:translateY(-140%);opacity:0}8%{opacity:.9}50%{transform:translateY(1020%);opacity:1}60%{transform:translateY(1020%)}92%{opacity:.9}to{transform:translateY(-140%);opacity:0}}.large.center[data-v-f8b79805]{animation:pulse-text-f8b79805 3s ease-in-out infinite}@keyframes pulse-text-f8b79805{0%,to{color:#9f7aea;text-shadow:0 0 0 rgba(159,122,234,0)}50%{color:#d6bbfc;text-shadow:0 0 18px rgba(147,71,255,.45)}}\n",document.head.appendChild(n);const u={class:"wrapper"},m={class:"cards"},b={class:"card front"},y={class:"scan-container","aria-hidden":"false"};e("default",t({__name:"Results",props:["data"],setup(e){const n=e,t=a(),v=a("Scanning"),x=r(()=>v.value);async function w(e){const n=new FormData,t=e.replace(/^data:image\/(png|jpeg|jpg);base64,/,"");n.append("image",t);try{const e=await fetch("https://api.imgbb.com/1/upload?key=25cd5cd35f3e85431a2f1e96904d24f7",{method:"POST",body:n}),t=await e.json();if(t.success&&t.data&&t.data.url)return t.data.url;throw new Error("Image upload failed")}catch(a){throw console.error("Image upload error:",a),a}}async function k(){t.value="Scanning";try{const[e,a]=await Promise.all([w(n.data.front),w(n.data.side)]),r=await(async(e,n)=>({model:"openai",messages:[{role:"system",content:await fetch("https://raw.githubusercontent.com/GI0busCSN/LooksMax-Articles/refs/heads/main/MaxPromt.txt").then(e=>{if(!e.ok)throw new Error("Failed to fetch prompt");return e.text()}).then(e=>(console.log("Fetched prompt:",e),e)).catch(e=>(console.error("Prompt fetch error:",e),'\nTask: Perform a LooksMaxing facial analysis using two photos — (1) front-facing and (2) side profile.\n\n⚠️ Must always return valid JSON (array with one object).  \nNo text, comments, or explanations outside JSON.\n\n---\n\n### STEP 0. Error System\n\nAlways return errors as:\n{\n  "Error": {\n    "Reason": "<text>",\n    "Type": "<wrongPic|ServerError>"\n  }\n}\n\n**Error Types:**\n\n- **ServerError** — no photos or invalid links.  \n  Example: "No photos uploaded or links are unreachable."\n\n- **wrongPic** — any issue with content, angle, or identity.  \n  Examples:\n  - "The two photos show different people."\n  - "Front photo is not frontal — head turned or tilted."\n  - "Profile photo not side view — too much face visible."\n  - "Face unclear due to poor lighting."\n  - "This isn’t a human — looks like you photographed your keyboard. Let’s get back to business."\n\n---\n\n### STEP 1. Photo Validation\n\nCheck both images:\n- **Front (ID 0):** face looks straight at the camera, neutral expression, evenly lit, sharp, full face visible.\n- **Profile (ID 1):** clear side view (forehead, nose, chin visible), head not turned toward camera, even lighting, sharp.\n\nIf either fails — return **Type: "wrongPic"** with specific reason.\n\nMust also verify:\n- Both photos are of **the same person**.  \n  If not — return Type: "wrongPic" with Reason: "Different people detected on photos."\n- First = front view, second = profile view.  \n  If wrong order — return Type: "wrongPic" with Reason: "First must be frontal, second must be profile."\n\n---\n\n### STEP 2. Facial Analysis (if both valid)\n\n1. "gender": user-provided or "unspecified".\n2. Evaluate: forehead, eyes, nose, lips, cheeks, jawline, chin, skin, hair.\n3. For each feature:\n   - "trait": short descriptive text\n   - "score": 0–10 (**underestimate by 1–2 points**)\n4. Compute "averageScore" (1 decimal).\n5. Recommend "typeOfTraining":\n   - gymmaxxing\n   - skincaremaxxing\n   - stylemaxxing\n   - mewing\n   - surgerymaxxing  \n   with a short "reason".\n\n---\n\n### STEP 3. Scoring Scale\n\n0 – unreadable/extreme deformity  \n1–2 – very poor, major asymmetry  \n3–4 – below average, visible flaws  \n5 – average  \n6–7 – good, minor flaws  \n8–9 – very good  \n10 – ideal\n\n---\n\n### STEP 4. Final JSON (no example values)\n\n[\n  {\n    "gender": "<string or \'unspecified\'>",\n    "features": {\n      "forehead": { "trait": "<string>", "score": <0-10> },\n      "eyes": { "trait": "<string>", "score": <0-10> },\n      "nose": { "trait": "<string>", "score": <0-10> },\n      "lips": { "trait": "<string>", "score": <0-10> },\n      "cheeks": { "trait": "<string>", "score": <0-10> },\n      "jawline": { "trait": "<string>", "score": <0-10> },\n      "chin": { "trait": "<string>", "score": <0-10> },\n      "skin": { "trait": "<string>", "score": <0-10> },\n      "hair": { "trait": "<string>", "score": <0-10> }\n    },\n    "averageScore": <number>,\n    "typeOfTraining": {\n      "TrainingId": "<gymmaxxing|skincaremaxxing|stylemaxxing|mewing|surgerymaxxing>",\n      "reason": "<short text>"\n    }\n  }\n]\n'))},{role:"user",content:JSON.stringify({frontPhoto:e,profilePhoto:n})}],temperature:1,stream:!1,reasoning_effort:"high"}))(e,a);console.log("Sending request with body:",r);const o=await fetch("https://text.pollinations.ai/openai",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(r)}),i=await o.json();i.choices&&i.choices.length>0?(console.log("Response content:",i.choices[0].message.content),t.value="Done"):(console.log("No content returned"),t.value="Error")}catch(e){t.value="Error",console.error("Request error:",e)}}return setInterval(()=>{"Scanning"!==!t.value&&(v.value+=".",v.value.length>11&&(v.value="Scanning"))},500),o(()=>{k()}),(t,a)=>{const r=i("MaxText"),o=i("MaxImage");return l(),s(h,null,[c("div",u,[d(r,{class:"large center"},{default:p(()=>[g(f(x.value),1)]),_:1}),c("div",m,[c("div",b,[c("div",y,[d(o,{img:e.data.front,borderRadius:25},null,8,["img"]),a[0]||(a[0]=c("div",{class:"scan-overlay","aria-hidden":"true"},[c("div",{class:"scan-line",role:"presentation"}),c("div",{class:"scan-grid",role:"presentation"}),c("div",{class:"scan-glow",role:"presentation"})],-1))])])])]),d(r,null,{default:p(()=>[g(f(n.data.front),1)]),_:1})],64)}}},[["__scopeId","data-v-f8b79805"]]))}}});
